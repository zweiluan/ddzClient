// Generated by sprotodump. DO NOT EDIT!
// source: C:\Users\weiluan\Desktop\hub\server\ddz\sproto\s2c.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace S2CSprotoType { 
	public class ongameover {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private bool _masterwin; // tag 0
			public bool masterwin {
				get { return _masterwin; }
				set { base.has_field.set_field (0, true); _masterwin = value; }
			}
			public bool HasMasterwin {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _p1score; // tag 1
			public Int64 p1score {
				get { return _p1score; }
				set { base.has_field.set_field (1, true); _p1score = value; }
			}
			public bool HasP1score {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _p2score; // tag 2
			public Int64 p2score {
				get { return _p2score; }
				set { base.has_field.set_field (2, true); _p2score = value; }
			}
			public bool HasP2score {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _p3score; // tag 3
			public Int64 p3score {
				get { return _p3score; }
				set { base.has_field.set_field (3, true); _p3score = value; }
			}
			public bool HasP3score {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.masterwin = base.deserialize.read_boolean ();
						break;
					case 1:
						this.p1score = base.deserialize.read_integer ();
						break;
					case 2:
						this.p2score = base.deserialize.read_integer ();
						break;
					case 3:
						this.p3score = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.masterwin, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.p1score, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.p2score, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.p3score, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class ongameready {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _cards; // tag 0
			public string cards {
				get { return _cards; }
				set { base.has_field.set_field (0, true); _cards = value; }
			}
			public bool HasCards {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _first; // tag 1
			public Int64 first {
				get { return _first; }
				set { base.has_field.set_field (1, true); _first = value; }
			}
			public bool HasFirst {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.cards = base.deserialize.read_string ();
						break;
					case 1:
						this.first = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.cards, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.first, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class ongamestart {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _master; // tag 0
			public Int64 master {
				get { return _master; }
				set { base.has_field.set_field (0, true); _master = value; }
			}
			public bool HasMaster {
				get { return base.has_field.has_field (0); }
			}

			private string _excards; // tag 1
			public string excards {
				get { return _excards; }
				set { base.has_field.set_field (1, true); _excards = value; }
			}
			public bool HasExcards {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.master = base.deserialize.read_integer ();
						break;
					case 1:
						this.excards = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.master, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.excards, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class onjoinroom {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _index; // tag 0
			public Int64 index {
				get { return _index; }
				set { base.has_field.set_field (0, true); _index = value; }
			}
			public bool HasIndex {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.index = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.index, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class onleaveroom {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _index; // tag 0
			public Int64 index {
				get { return _index; }
				set { base.has_field.set_field (0, true); _index = value; }
			}
			public bool HasIndex {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.index = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.index, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class onplay {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private bool _pass; // tag 0
			public bool pass {
				get { return _pass; }
				set { base.has_field.set_field (0, true); _pass = value; }
			}
			public bool HasPass {
				get { return base.has_field.has_field (0); }
			}

			private string _cards; // tag 1
			public string cards {
				get { return _cards; }
				set { base.has_field.set_field (1, true); _cards = value; }
			}
			public bool HasCards {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _index; // tag 2
			public Int64 index {
				get { return _index; }
				set { base.has_field.set_field (2, true); _index = value; }
			}
			public bool HasIndex {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _next; // tag 3
			public Int64 next {
				get { return _next; }
				set { base.has_field.set_field (3, true); _next = value; }
			}
			public bool HasNext {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.pass = base.deserialize.read_boolean ();
						break;
					case 1:
						this.cards = base.deserialize.read_string ();
						break;
					case 2:
						this.index = base.deserialize.read_integer ();
						break;
					case 3:
						this.next = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.pass, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.cards, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.index, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.next, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class onrequestmaster {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _rate; // tag 0
			public Int64 rate {
				get { return _rate; }
				set { base.has_field.set_field (0, true); _rate = value; }
			}
			public bool HasRate {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _index; // tag 1
			public Int64 index {
				get { return _index; }
				set { base.has_field.set_field (1, true); _index = value; }
			}
			public bool HasIndex {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _next; // tag 2
			public Int64 next {
				get { return _next; }
				set { base.has_field.set_field (2, true); _next = value; }
			}
			public bool HasNext {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.rate = base.deserialize.read_integer ();
						break;
					case 1:
						this.index = base.deserialize.read_integer ();
						break;
					case 2:
						this.next = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.rate, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.index, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.next, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class onuserready {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _index; // tag 0
			public Int64 index {
				get { return _index; }
				set { base.has_field.set_field (0, true); _index = value; }
			}
			public bool HasIndex {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.index = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.index, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			return base.serialize.close ();
		}
	}


	public class push {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _text; // tag 0
			public string text {
				get { return _text; }
				set { base.has_field.set_field (0, true); _text = value; }
			}
			public bool HasText {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.text = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.text, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}


public class S2CProtocol : ProtocolBase {
	public static  S2CProtocol Instance = new S2CProtocol();
	private S2CProtocol() {
		Protocol.SetProtocol<heartbeat> (heartbeat.Tag);

		Protocol.SetProtocol<ongameover> (ongameover.Tag);
		Protocol.SetRequest<S2CSprotoType.ongameover.request> (ongameover.Tag);

		Protocol.SetProtocol<ongameready> (ongameready.Tag);
		Protocol.SetRequest<S2CSprotoType.ongameready.request> (ongameready.Tag);

		Protocol.SetProtocol<ongamestart> (ongamestart.Tag);
		Protocol.SetRequest<S2CSprotoType.ongamestart.request> (ongamestart.Tag);

		Protocol.SetProtocol<onjoinroom> (onjoinroom.Tag);
		Protocol.SetRequest<S2CSprotoType.onjoinroom.request> (onjoinroom.Tag);

		Protocol.SetProtocol<onleaveroom> (onleaveroom.Tag);
		Protocol.SetRequest<S2CSprotoType.onleaveroom.request> (onleaveroom.Tag);

		Protocol.SetProtocol<onplay> (onplay.Tag);
		Protocol.SetRequest<S2CSprotoType.onplay.request> (onplay.Tag);

		Protocol.SetProtocol<onrequestmaster> (onrequestmaster.Tag);
		Protocol.SetRequest<S2CSprotoType.onrequestmaster.request> (onrequestmaster.Tag);

		Protocol.SetProtocol<onuserready> (onuserready.Tag);
		Protocol.SetRequest<S2CSprotoType.onuserready.request> (onuserready.Tag);

		Protocol.SetProtocol<push> (push.Tag);
		Protocol.SetRequest<S2CSprotoType.push.request> (push.Tag);

	}

	public class heartbeat {
		public const int Tag = 5;
	}

	public class ongameover {
		public const int Tag = 10;
	}

	public class ongameready {
		public const int Tag = 6;
	}

	public class ongamestart {
		public const int Tag = 8;
	}

	public class onjoinroom {
		public const int Tag = 2;
	}

	public class onleaveroom {
		public const int Tag = 3;
	}

	public class onplay {
		public const int Tag = 9;
	}

	public class onrequestmaster {
		public const int Tag = 7;
	}

	public class onuserready {
		public const int Tag = 4;
	}

	public class push {
		public const int Tag = 1;
	}

}